generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id         Int      @id @default(autoincrement())
  name       String
  email      String?
  type       Json
  website    String?
  phone      String?
  currencyId Int
  currency   Currency @relation("ContactCurrency", fields: [currencyId], references: [id])
  salesOrders SalesOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Currency {
  id           Int       @id @default(autoincrement())
  code         String    @unique
  name         String
  symbol       String?
  exchangeRate Float?
  accounts     Account[] @relation("AccountCurrency")
  contacts     Contact[] @relation("ContactCurrency")

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Classification {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  description        String?
  subclassifications Subclassification[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Subclassification {
  id               Int            @id @default(autoincrement())
  name             String         @unique
  description      String?
  classificationId Int
  classification   Classification @relation(fields: [classificationId], references: [id])
  accounts         Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Account {
  id                  Int               @id @default(autoincrement())
  name                String
  accountNumber       String            @unique
  type                String
  currencyId          Int
  currency            Currency          @relation("AccountCurrency", fields: [currencyId], references: [id])
  subclassificationId Int
  subclassification   Subclassification @relation(fields: [subclassificationId], references: [id])
  balance             Float             @default(0.0)
  salesOrdersMain     SalesOrder[]      @relation("SalesOrderMainAccount")
  salesOrdersSub      SalesOrder[]      @relation("SalesOrderSubAccount")
  salesOrdersTax SalesOrder[] @relation("SalesOrderTaxAccount")

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  status      Boolean      @default(true) // True = Active, False = Inactive
  warehouses  Warehouse[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model Warehouse {
  id          Int          @id @default(autoincrement())
  name        String
  location    String?
  status      Boolean      @default(true) // True = Active, False = Inactive
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  inventories Inventory[]
  salesOrders SalesOrder[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model Inventory {
  id              Int            @id @default(autoincrement())
  sku             String         @unique
  name            String         // Name of the item
  description     String?        // Optional description
  quantity        Int            // Quantity available
  warehouseId     Int
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [id])
  unitOfMeasureId Int?
  unitOfMeasure   UnitOfMeasure? @relation("UnitOfMeasureRelation",fields: [unitOfMeasureId], references: [id])
  salesOrders     SalesOrder[]   @relation("SalesOrderInventory")

  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
}

model UnitOfMeasure {
  id               Int              @id @default(autoincrement())
  name             String           // Name of the unit (e.g., "Box", "Piece", "Kilogram")
  description      String?          // Optional description
  subUnitId        Int?             // Self-referencing relationship for sub-units
  subUnit          UnitOfMeasure?   @relation("SubUnitRelation", fields: [subUnitId], references: [id])
  mainUnits        UnitOfMeasure[]  @relation("SubUnitRelation")
  conversionFactor Float?           // Conversion factor to main unit (e.g., 1 box = 12 pieces)
  inventory     Inventory[]   @relation("UnitOfMeasureRelation")

  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}

model SalesOrder {
  id            String         @id @default(uuid())
  orderNumber   String         @unique
  customerName  String
  status        String         // Example: 'Pending', 'Confirmed', 'Delivered'
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  totalAmount   Float
  orderDate     DateTime       @default(now())
  taxAccountId  Int
  taxAccount    Account @relation("SalesOrderTaxAccount", fields: [taxAccountId], references: [id])


  contactId     Int
  contact       Contact        @relation(fields: [contactId], references: [id])

  mainAccountId Int
  mainAccount   Account        @relation("SalesOrderMainAccount", fields: [mainAccountId], references: [id])

  subAccountId  Int?
  subAccount    Account?       @relation("SalesOrderSubAccount", fields: [subAccountId], references: [id])

  warehouseId   Int
  warehouse     Warehouse      @relation(fields: [warehouseId], references: [id])

  inventories   Inventory[]    @relation("SalesOrderInventory")

  deliveryOrders DeliveryOrder[]
  invoices      Invoice[]

  @@map("sales_orders")
}

model DeliveryOrder {
  id             String       @id @default(uuid())
  deliveryNumber String       @unique
  salesOrderId   String
  status         String       // Example: 'Pending', 'In Transit', 'Delivered'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  salesOrder     SalesOrder   @relation(fields: [salesOrderId], references: [id])
  invoice        Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId      String?

  @@map("delivery_orders")
}

model Invoice {
  id            String         @id @default(uuid())
  invoiceNumber String         @unique
  salesOrderId  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  amountDue     Float
  dueDate       DateTime
  status        String         // Example: 'Unpaid', 'Paid', 'Overdue'
  salesOrder    SalesOrder     @relation(fields: [salesOrderId], references: [id])
  deliveryOrders DeliveryOrder[]

  @@map("invoices")
}